---

- name: Ensure Latest Docker
  apt:
    name: 
      - docker-ce
    state: latest
  become: "{{ become_user | default(true) }}"
  
- name: Clean up
  docker_prune:
    containers: yes
    images: yes
    builder_cache: yes
  become: "{{ become_user | default(true) }}"
    
- name: Create a Docker Network
  docker_network:
    name: "{{ item.name }}"
    ipam_config: "{{ item.ipam_config }}"
  loop: "{{ docker_networks }}"
  become: "{{ become_user | default(true) }}"

- name: Set source dirs
  set_fact:
    source_dirs: "{{lookup('subelements', docker_containers, 'volumes', {'skip_missing': True}) | list }}"
    #source_dirs: "{{lookup('subelements', docker_containers, 'volumes', {'skip_missing': True, 'wantlist': True}) |list }}"

- name: Make sure source dir exists
  file: 
    state: directory
    path: "{{ item.1 | regex_replace(':.*','') }}"
    mode: 0755
  loop: 
  - "{{ source_dirs }}"
  when: 
    - item.0.tag in group_names
  become: "{{ become_user | default(true) }}"
  ignore_errors: yes

- name: Deploy Docker Containers
  docker_container:
    name: "{{ item.name }}"
    image: "{{ item.image }}"
    command: "{{ item.command | default('') }}"
    state: "{{ item.state }}"
    recreate: "{{ item.recreate }}"
    restart_policy: "{{ item.restart_policy }}"
    pull: "{{ item.pull }}"
    ports: "{{ item.ports }}"
    networks: "{{ item.networks }}"
    capabilities: "{{ item.capabilities | default([]) }}"
  loop: "{{ docker_containers }}"
  when: 
    - item.tag in group_names
    - item.networks is defined
  become: "{{ become_user | default(true) }}"

- name: Deploy Docker Containers without networks
  docker_container:
    name: "{{ item.name }}"
    image: "{{ item.image }}"
    command: "{{ item.command | default('') }}"
    state: "{{ item.state }}"
    recreate: "{{ item.recreate }}"
    restart_policy: "{{ item.restart_policy }}"
    pull: "{{ item.pull }}"
    ports: "{{ item.ports |default(omit)}}"
    capabilities: "{{ item.capabilities | default(omit) }}"
    volumes: "{{ item.volumes | default([])}}"
  loop: "{{ docker_containers }}"
  when: 
    - item.tag in group_names
    - item.networks is not defined
  become: "{{ become_user | default(true) }}"

